using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core_Plc.Entities
{
    public class DeviceInfo
    {
        public string ProductName { get; set; }
        public ushort ProductCode { get; set; }
        public ushort VendorID { get; set; }
        public ushort DeviceType { get; set; }
        public string Revision { get; set; }

    }
}


using Core_Plc.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace Core_Plc.Interfaces
{
    public interface IPlcService
        {
        Task<DeviceInfo> GetDeviceInfoAsync(string ipAddress);
        Task<byte[]> GetInstanceDataAsync(string ipAddress, int instance);
    }
}



using Core_Plc.Entities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Core_Plc.Interfaces
{
    public interface IPlcRepository
    {
        Task<DeviceInfo> GetDeviceInfoAsync(string ipAddress);
        Task<byte[]> GetInstanceDataAsync(string ipAddress, int instance);

    }
}


using Core_Plc.Entities;
using Core_Plc.Interfaces;
using Microsoft.Extensions.Logging;
using Sres.Net.EEIP;
using System;
using System.Threading.Tasks;

namespace Infratructure_Plc.Repositories
{
    public class PlcRepository : IPlcRepository
    {
        private readonly ILogger<PlcRepository> _logger;

        public PlcRepository(ILogger<PlcRepository> logger)
        {
            _logger = logger;
        }

        public async Task<DeviceInfo> GetDeviceInfoAsync(string ipAddress)
        {
            EEIPClient eeipClient = null;

            try
            {
                eeipClient = new EEIPClient();
                eeipClient.IPAddress = ipAddress;
                eeipClient.RegisterSession();

                var identity = eeipClient.IdentityObject;

                return new DeviceInfo
                {
                    ProductName = identity.ProductName,
                    ProductCode = identity.ProductCode,
                    VendorID = identity.VendorID,
                    DeviceType = identity.DeviceType,
                    Revision = identity.Revision.ToString()
                };
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving device information");
                throw;
            }
            finally
            {
                // Giải phóng tài nguyên nếu không phải là null
                if (eeipClient != null)
                {
                    eeipClient.UnRegisterSession();
                }
            }
        }

        public async Task<byte[]> GetInstanceDataAsync(string ipAddress, int instance)
        {
            EEIPClient eeipClient = null;

            try
            {
                eeipClient = new EEIPClient();
                eeipClient.IPAddress = ipAddress;
                eeipClient.RegisterSession();

                return eeipClient.AssemblyObject.getInstance(instance);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error retrieving instance data");
                throw;
            }
            finally
            {
                // Giải phóng tài nguyên nếu không phải là null
                if (eeipClient != null)
                {
                    eeipClient.UnRegisterSession();
                }
            }
        }
    }
}



using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using Core_Plc.Entities;
using Core_Plc.Interfaces;


namespace Application_Plc.Services
{

    public class PlcService : IPlcService
    {
        private readonly IPlcRepository _plcRepository;

        public PlcService(IPlcRepository plcRepository)
        {
            _plcRepository = plcRepository;
        }

        public async Task<DeviceInfo> GetDeviceInfoAsync(string ipAddress)
        {
            return await _plcRepository.GetDeviceInfoAsync(ipAddress);
        }

        public async Task<byte[]> GetInstanceDataAsync(string ipAddress, int instance)
        {
            return await _plcRepository.GetInstanceDataAsync(ipAddress, instance);
        }
    }







    /*
    public class PlcService : IPlcService
    {
        private readonly IPlcRepository _plcRepository;

        public PlcService(IPlcRepository plcRepository)
        {
            _plcRepository = plcRepository;
        }

     

        public async Task<PLCData> Get_DData(string ipAddress, int port, ushort startAddress, ushort numberOfPoints)
        {
            return await _plcRepository.Get_DData(ipAddress, port, startAddress, numberOfPoints);
        }




        public async Task<string> Getname(string ipAddress, int port)
        {

            // Use the repository to get the device name (assuming you have such functionality)
            var deviceInfo = await _plcRepository(ipAddress, port);
            return deviceInfo;
        }
        /*
public async Task<string> GetStatus(string ipAddress, int port)
{
    var deviceInfo = await _plcRepository.GetDeviceInfoAsync(ipAddress, port);
    return deviceInfo.DeviceStatus;

}
public async Task<string> GetConnectionStatus(string ipAddress, int port)
{
    var deviceInfo = await _plcRepository.GetDeviceInfoAsync(ipAddress, port);
    return deviceInfo.ConnectionStatus;
}

public async Task<string> GetDataFromPlc(string ipAddress, int port)
{
    var deviceInfo = await _plcRepository.GetDeviceInfoAsync(ipAddress, port);
    return deviceInfo.DataFromPlc;
}

public async Task<string> GetAccessCode(string ipAddress, int port)
{
    var deviceInfo = await _plcRepository.GetDeviceInfoAsync(ipAddress, port);
    return deviceInfo.AccessCode;
}

public async Task<string> GetVendorID(string ipAddress, int port)
{
    var deviceInfo = await _plcRepository.GetDeviceInfoAsync(ipAddress, port);
    return deviceInfo.VendorID;
}

public async Task<string> GetDeviceType(string ipAddress, int port)
{
    var deviceInfo = await _plcRepository.GetDeviceInfoAsync(ipAddress, port);
    return deviceInfo.DeviceType;
}



        public Task<PLCError> Get_All(string ipAddress, int port)
        {
            throw new NotImplementedException();
        }
    */


}


using Application_Plc.Services;
using Core_Plc.Interfaces;
using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;

namespace mvc1.Controllers
{
    public class PlcController : Controller
    {
        private readonly IPlcService _plcService;

        public PlcController(IPlcService plcService)
        {
            _plcService = plcService;
        }

        public async Task<IActionResult> Index()
        {
            var deviceInfo = await _plcService.GetDeviceInfoAsync("192.168.1.10");
            return View(deviceInfo);
        }

        public async Task<IActionResult> InstanceData(int instance)
        {
            var data = await _plcService.GetInstanceDataAsync("192.168.1.10", instance);
            return View(data);
        }
    }
}



@model Core_Plc.Entities.DeviceInfo

<h2>Device Information</h2>
<p>Product Name: @Model.ProductName</p>
<p>Product Code: @Model.ProductCode</p>
<p>Vendor ID: @Model.VendorID</p>
<p>Device Type: @Model.DeviceType</p>
<p>Revision: @Model.Revision</p>

using Microsoft.AspNetCore.Builder;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Serilog;
using Core_Plc.Interfaces;
using Application_Plc.Services;
using Infratructure_Plc.Repositories;

var builder = WebApplication.CreateBuilder(args);

// Configure Serilog
Log.Logger = new LoggerConfiguration()
    .WriteTo.Console()
    .WriteTo.File("Logs/myapp.log", rollingInterval: RollingInterval.Day)
    .CreateLogger();

builder.Logging.ClearProviders();
builder.Logging.AddSerilog();

// Register services
builder.Services.AddScoped<IPlcRepository, PlcRepository>();
builder.Services.AddScoped<IPlcService, PlcService>();

builder.Services.AddControllersWithViews();

var app = builder.Build();

if (!app.Environment.IsDevelopment())
{
    app.UseExceptionHandler("/Home/Error");
    app.UseHsts();
}

app.UseHttpsRedirection();
app.UseStaticFiles();
app.UseRouting();
app.UseAuthorization();

app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Plc}/{action=Index}/{id?}");

app.Run();



